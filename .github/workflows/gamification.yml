name: Asignar Puntos por Documentación
on:
  pull_request:
    types: [closed]  # Se ejecuta cuando se cierra o fusiona un PR.

jobs:
  assign_points:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configurar Git para commits
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Actualizar tabla de puntos
      run: |
        POINTS_FILE="scoreboard.md"
        NEW_POINTS=100  # Asignar 100 puntos por cada PR.
        
        # Verificar si el archivo scoreboard.md existe
        if [[ -f "$POINTS_FILE" ]]; then
          # Verificar si el desarrollador ya está en la tabla
          if grep -q "$GITHUB_ACTOR" "$POINTS_FILE"; then
            # Si el desarrollador ya existe, extraer sus puntos actuales y sumar los nuevos
            CURRENT_POINTS=$(grep "$GITHUB_ACTOR" "$POINTS_FILE" | awk '{print $3}')
            UPDATED_POINTS=$((CURRENT_POINTS + NEW_POINTS))
            # Clasificar y asignar nivel e insignia según los puntos
            if [[ $UPDATED_POINTS -ge 1500 ]]; then
              LEVEL="Documentador Retador"
              BADGE="![Insignia Retador](insignias/Insignia-Retador.png)"
            elif [[ $UPDATED_POINTS -ge 1200 ]]; then
              LEVEL="Documentador Maestro"
              BADGE="![Insignia Maestro](insignias/Insignia-Maestro.png)"
            elif [[ $UPDATED_POINTS -ge 1000 ]]; then
              LEVEL="Documentador Intermedio Avanzado"
              BADGE="![Insignia Intermedio Avanzado](insignias/Insignia-IntermedioAvanzado.png)"
            elif [[ $UPDATED_POINTS -ge 800 ]]; then
              LEVEL="Documentador Intermedio"
              BADGE="![Insignia Intermedio](insignias/Insignia-Intermedio.png)"
            elif [[ $UPDATED_POINTS -ge 500 ]]; then
              LEVEL="Documentador Principiante"
              BADGE="![Insignia Principiante](insignias/Insignia-Principiante.png)"
            else
              LEVEL="Documentador Novato"
              BADGE="![Insignia Novato](insignias/Insignia-Novato.png)"
            fi
            # Actualizar la fila del desarrollador con los nuevos puntos, nivel e insignia
            sed -i "s/| $GITHUB_ACTOR | $CURRENT_POINTS |.*|/| $GITHUB_ACTOR | $UPDATED_POINTS | $LEVEL | $BADGE |/" "$POINTS_FILE"
          else
            # Si el desarrollador no está en la tabla, agregarlo con los puntos iniciales
            echo "| $GITHUB_ACTOR | $NEW_POINTS | Documentador Novato | ![Insignia Novato](insignias/Insignia-Novato.png) |" >> "$POINTS_FILE"
          fi
        else
          # Si el archivo no existe, crearlo y agregar la tabla inicial
          echo "# Tabla de Puntuación" > "$POINTS_FILE"
          echo "| Desarrollador      | Puntos  | Nivel               | Insignia                       |" >> "$POINTS_FILE"
          echo "|--------------------|---------|---------------------|--------------------------------|" >> "$POINTS_FILE"
          echo "| $GITHUB_ACTOR | $NEW_POINTS | Documentador Novato | ![Insignia Novato](insignias/Insignia-Novato.png) |" >> "$POINTS_FILE"
        fi

    - name: Commit y Push de la tabla de puntuación
      run: |
        git add scoreboard.md
        git commit -m "Actualizar tabla de puntos para $GITHUB_ACTOR"
        git push origin HEAD:main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



